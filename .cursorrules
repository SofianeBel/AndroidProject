# Règles pour optimiser Cursor AI dans un projet Android Java avec Firebase

# 1. Style de codage
style:
  language: java
  enforce_typing: true  # Toujours déclarer explicitement les types
  formatting: google-java-format  # Utiliser le formatage standard Google Java Style Guide
  max_line_length: 100  # Limite de longueur des lignes pour une meilleure lisibilité

# 2. Frameworks et bibliothèques
frameworks:
  preferred:
    - androidx.appcompat
    - androidx.lifecycle
    - androidx.room
    - com.google.firebase:firebase-auth
    - com.google.firebase:firebase-firestore
    - com.google.firebase:firebase-storage
    - glide
    - retrofit2
  avoid:
    - java.util.Vector  # Éviter les classes obsolètes ou inefficaces

# 3. Architecture et organisation du code
architecture:
  enforce_mvvm: true  # Utiliser l'architecture MVVM (Model-View-ViewModel)
  file_structure:
    enforce: true
    rules:
      - "Les activités doivent être placées dans le dossier `ui`."
      - "Les ViewModels doivent être placés dans le dossier `viewmodel`."
      - "Les modèles doivent être placés dans le dossier `model`."
      - "Les services (Firebase, API) doivent être placés dans le dossier `service`."
      - "Les tests doivent être placés dans `src/test/java`."

# 4. Bonnes pratiques Firebase
firebase_best_practices:
  authentication:
    rules:
      - "Utiliser Firebase Authentication pour gérer les utilisateurs."
      - "Activer la connexion avec email/mot de passe et Google OAuth."
      - "Gérer les erreurs d'authentification avec des messages clairs pour l'utilisateur."
  firestore:
    rules:
      - "Utiliser Firestore pour stocker les tweets (posts)."
      - "Structurer les collections : `users`, `tweets`, et `likes`."
      - "Paginer les requêtes avec `startAfter()` et `limit()`."
      - "Optimiser les requêtes avec des index Firestore."
  storage:
    rules:
      - "Utiliser Firebase Storage pour stocker les images (avatars, photos de tweets)."
      - "Limiter la taille des fichiers uploadés à 5 Mo."
      - "Ajouter des règles de sécurité pour restreindre l'accès aux fichiers sensibles."

# 5. Sécurité et confidentialité
security:
  enforce_https: true   # Toujours utiliser HTTPS pour les appels réseau
  sanitize_inputs: true # Valider toutes les entrées utilisateur pour éviter les failles XSS/SQLi
  firebase_security_rules: true # Configurer des règles de sécurité Firestore et Storage

# 6. Tests automatiques
testing:
  framework: junit4       # Utiliser JUnit4 pour les tests unitaires
  ui_testing: espresso    # Utiliser Espresso pour tester l'interface utilisateur
  firebase_emulators: true # Tester localement avec les émulateurs Firebase (Auth, Firestore, Storage)
  coverage_threshold: 85  # Exiger une couverture minimale de tests de 85 %

# 7. Suggestions IA Cursor
ai_behavior:
  prioritize_performance: true   # Optimiser le code généré pour la performance (Firebase inclus)
  avoid_redundancy: true         # Éviter les répétitions inutiles dans le code généré

# Exemple spécifique : Gestion des tweets (posts)
specific_rules:
  file_pattern: "**/Tweet*.java"
  rules:
    - "Inclure des méthodes CRUD (Create, Read, Update, Delete) pour gérer les tweets."
    - "Utiliser Firestore comme source de vérité pour stocker les tweets."
    - "Paginer l'affichage des tweets avec RecyclerView et FirestorePagingAdapter."

# Documentation et commentaires
documentation:
  generate_comments: true       # Ajouter automatiquement des commentaires explicatifs au code généré
  doc_format: javadoc           # Utiliser Javadoc pour documenter les classes et méthodes